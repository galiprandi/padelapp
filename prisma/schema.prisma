generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_DIRECT") // enable for read replicas
}

model User {
  id            String    @id @default(cuid())
  displayName   String
  email         String    @unique
  image         String?
  level         Int       @default(6)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  matches       Match[]   @relation("MatchCreator")
  matchPlayers  MatchPlayer[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id          String       @id @default(cuid())
  creatorId   String
  creator     User         @relation("MatchCreator", fields: [creatorId], references: [id])
  status      MatchStatus  @default(PENDING)
  sets        Int          @default(2)
  matchType   MatchType    @default(FRIENDLY)
  club        String?
  courtNumber String?
  score       String?
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  players     MatchPlayer[]
}

model MatchPlayer {
  id             String   @id @default(cuid())
  matchId        String
  match          Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
  position       Int
  resultConfirmed Boolean @default(false)
  displayName    String?
  teamId         String?
  team           Team?    @relation(fields: [teamId], references: [id])
  joinedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([matchId, position])
  @@unique([matchId, userId])
}

model Team {
  id          String        @id @default(cuid())
  label       String
  matchPlayers MatchPlayer[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum MatchStatus {
  PENDING
  CONFIRMED
  DISPUTED
}

enum MatchType {
  FRIENDLY
  LOCAL_TOURNAMENT
}
