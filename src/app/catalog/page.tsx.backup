"use client";

import { useState } from 'react';
import { PageHeader } from '@/components/page-header';
import {
  PairInline,
  PairPreview,
  PlayerCompact,
  PlayerPreview,
  PlayerPreviewProps,
  PlayerWithRanking,
} from "@/components/players/player-cards";
import { MatchResultCompact, type MatchResultCompactMatch } from "@/components/matches/match-result-card";
import { BottomNav } from "@/components/navigation/bottom-nav";
import { EmptyState } from "@/components/empty-state";
import { Button } from "@/components/ui/button";
import { mockPlayers } from "@/lib/mock-data";

const SAMPLE_PLAYERS = mockPlayers as PlayerPreviewProps[];
const SAMPLE_MATCH: MatchResultCompactMatch = {
  id: "match-sample",
  createdAt: "2025-01-18T18:00:00.000Z",
  score: "7-3, 3-7, 7-5",
  status: "CONFIRMED",
  players: [
    {
      id: "match-player-1",
      position: 0,
      user: {
        id: SAMPLE_PLAYERS[0]?.id ?? "player-1",
        displayName: SAMPLE_PLAYERS[0]?.name ?? "Jugador 1",
        image: SAMPLE_PLAYERS[0]?.image ?? null,
      },
    },
    {
      id: "match-player-2",
      position: 1,
      user: {
        id: SAMPLE_PLAYERS[1]?.id ?? "player-2",
        displayName: SAMPLE_PLAYERS[1]?.name ?? "Jugador 2",
        image: SAMPLE_PLAYERS[1]?.image ?? null,
      },
    },
    {
      id: "match-player-3",
      position: 2,
      user: {
        id: SAMPLE_PLAYERS[2]?.id ?? "player-3",
        displayName: SAMPLE_PLAYERS[2]?.name ?? "Jugador 3",
        image: SAMPLE_PLAYERS[2]?.image ?? null,
      },
    },
    {
      id: "match-player-4",
      position: 3,
      user: {
        id: SAMPLE_PLAYERS[3]?.id ?? "player-4",
        displayName: SAMPLE_PLAYERS[3]?.name ?? "Jugador 4",
        image: SAMPLE_PLAYERS[3]?.image ?? null,
      },
    },
  ],
};

const CATEGORIES = [
  { id: 'layout', name: 'Layout', icon: '📐' },
  { id: 'players', name: 'Jugadores', icon: '👥' },
  { id: 'matches', name: 'Partidos', icon: '🎾' },
  { id: 'states', name: 'Estados', icon: '📋' },
  { id: 'navigation', name: 'Navegación', icon: '🧭' },
];

export default function ComponentCatalogPage() {
  const [activeCategory, setActiveCategory] = useState('layout');

  const scrollToSection = (sectionId: string) => {
    setActiveCategory(sectionId);
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  return (
    <div className="flex gap-8">
          {/* Sidebar */}
          <aside className="w-64 shrink-0">
            <div className="sticky top-24">
              <nav className="space-y-1">
                {CATEGORIES.map((category) => (
                  <button
                    key={category.id}
                    onClick={() => scrollToSection(category.id)}
                    className={`w-full flex items-center gap-3 px-3 py-2 text-left rounded-lg transition-colors ${
                      activeCategory === category.id
                        ? 'bg-primary text-primary-foreground'
                        : 'hover:bg-muted text-muted-foreground hover:text-foreground'
                    }`}
                  >
                    <span className="text-lg">{category.icon}</span>
                    <span className="font-medium">{category.name}</span>
                  </button>
                ))}
              </nav>
            </div>
          </aside>

          {/* Main Content */}
          <div className="flex-1 min-w-0">
            <div className="space-y-12">
              {/* Layout Section */}
              <section id="layout" className="space-y-6">
                <div>
                  <h2 className="text-xl font-semibold mb-2">📐 Layout</h2>
                  <p className="text-muted-foreground">
                    Componentes para estructurar páginas y secciones.
                  </p>
                </div>

                <div className="space-y-6">
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Encabezados de página</h3>
                    <p className="text-sm text-muted-foreground">
                      Componente estándar para títulos de página con descripción opcional y CTA.
                    </p>

                    <div className="space-y-4 p-4 border rounded-lg bg-muted/50">
                      <PageHeader
                        title="Mis partidos"
                        description="Gestioná tus partidos activos y resultados."
                        action={
                          <Button size="sm" className="w-full max-w-xs">
                            Crear partido
                          </Button>
                        }
                      />

                      <PageHeader
                        title="Ranking general"
                        description="Posiciones actualizadas de todos los jugadores."
                      />
                    </div>
                  </div>
                </div>
              </section>

              {/* Players Section */}
              <section id="players" className="space-y-6">
                <div>
                  <h2 className="text-xl font-semibold mb-2">👥 Jugadores</h2>
                  <p className="text-muted-foreground">
                    Variantes de componentes para mostrar información de jugadores.
                  </p>
                </div>

                <div className="space-y-6">
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Vista completa</h3>
                    <p className="text-sm text-muted-foreground">
                      Patrón base utilizado en `/match/new` para invitar o gestionar jugadores dentro de un turno.
                    </p>

                    <div className="space-y-3 p-4 border rounded-lg bg-muted/50">
                      {SAMPLE_PLAYERS.map((player) => (
                        <PlayerPreview key={player.id} {...player} />
                      ))}
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Con ranking</h3>
                    <p className="text-sm text-muted-foreground">
                      Útil para listados donde el CTA se reemplaza por la posición actual del jugador.
                    </p>

                    <div className="space-y-3 p-4 border rounded-lg bg-muted/50">
                      {SAMPLE_PLAYERS.map((player) => (
                        <PlayerWithRanking key={`ranking-${player.id}`} {...player} />
                      ))}
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Vista compacta</h3>
                    <p className="text-sm text-muted-foreground">
                      Solo conserva el nombre y ranking para listas de acceso rápido.
                    </p>

                    <div className="space-y-3 p-4 border rounded-lg bg-muted/50">
                      {SAMPLE_PLAYERS.map((player) => (
                        <PlayerCompact key={`compact-${player.id}`} {...player} />
                      ))}
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Parejas completas</h3>
                    <p className="text-sm text-muted-foreground">
                      Agrupa fichas de jugadores bajo un encabezado para representar Pareja A/B.
                    </p>

                    <div className="space-y-3 p-4 border rounded-lg bg-muted/50">
                      <PairPreview label="Pareja A" players={SAMPLE_PLAYERS.slice(0, 2)} />
                      <PairPreview label="Pareja B" players={SAMPLE_PLAYERS.slice(2, 4)} />
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Parejas en línea</h3>
                    <p className="text-sm text-muted-foreground">
                      Presentación compacta para resúmenes de partidos o historial, sin botones de acción.
                    </p>

                    <div className="p-4 border rounded-lg bg-muted/50">
                      <PairInline label="Pareja A" players={SAMPLE_PLAYERS.slice(0, 2)} />
                    </div>
                  </div>
                </div>
              </section>

              {/* Matches Section */}
              <section id="matches" className="space-y-6">
                <div>
                  <h2 className="text-xl font-semibold mb-2">🎾 Partidos</h2>
                  <p className="text-muted-foreground">
                    Componentes relacionados con partidos y resultados.
                  </p>
                </div>

                <div className="space-y-6">
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Resultado compacto</h3>

                    <div className="p-4 border rounded-lg bg-muted/50">
                      <MatchResultCompact label="Resultado ejemplo" match={SAMPLE_MATCH} detailUrl={`/match/${SAMPLE_MATCH.id}`} />
                    </div>
                  </div>
                </div>
              </section>

              {/* States Section */}
              <section id="states" className="space-y-6">
                <div>
                  <h2 className="text-xl font-semibold mb-2">📋 Estados</h2>
                  <p className="text-muted-foreground">
                    Estados especiales como contenido vacío o mensajes informativos.
                  </p>
                </div>

                <div className="space-y-6">
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Estados vacíos</h3>
                    <p className="text-sm text-muted-foreground">
                      Bloques neutrales para comunicar que una sección no tiene datos y sugerir el siguiente paso.
                    </p>

                    <div className="space-y-4 p-4 border rounded-lg bg-muted/50">
                      <EmptyState
                        title="Sin partidos todavía"
                        description="Cuando quieras, creá un partido nuevo y administralo desde tu tablero."
                        action={
                          <Button size="sm" className="w-full max-w-xs">
                            Crear partido
                          </Button>
                        }
                      />
                      <EmptyState
                        title="No hay turnos próximos"
                        description="Publicá un turno abierto para invitar a la comunidad."
                      />
                    </div>
                  </div>
                </div>
              </section>

              {/* Navigation Section */}
              <section id="navigation" className="space-y-6">
                <div>
                  <h2 className="text-xl font-semibold mb-2">🧭 Navegación</h2>
                  <p className="text-muted-foreground">
                    Componentes para navegación y movimiento entre secciones.
                  </p>
                </div>

                <div className="space-y-6">
                  <div className="space-y-3">
                    <h3 className="text-lg font-medium">Barra de navegación inferior</h3>
                    <p className="text-sm text-muted-foreground">
                      Barra persistente en mobile, plana sobre el fondo y centrada en íconos. Incluye un ejemplo de badge de notificaciones.
                    </p>

                    <div className="p-4 border rounded-lg bg-muted/50">
                      <BottomNav position="static" notificationsCount={3} notificationsHref="/notifications" />
                    </div>
                  </div>
                </div>
              </section>
            </div>
          </div>
        </div>
      </div>
  );
}
